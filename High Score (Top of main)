
using namespace std;

const int ROWS = 20;
const int COLS = 10;
const int BLOCK_SIZE = 25;
const int BOARD_WIDTH = 1000;
const int BOARD_HEIGHT = 1000;
const vector<int> BACKGROUND_COLOR = {25, 25, 25};

// Tetrimino shapes
const vector<vector<vector<bool>>> TETRIMINOS = {
    // I
    {
        {1, 1, 1, 1}
    },
    // O
    {
        {1, 1},
        {1, 1}
    },
    // T
    {
        {0, 1, 0},
        {1, 1, 1}
    },
    // L
    {
        {1, 0, 0},
        {1, 1, 1}
    },
    // J
    {
        {0, 0, 1},
        {1, 1, 1}
    },
    // S
    {
        {0, 1, 1},
        {1, 1, 0}
    },
    // Z
    {
        {1, 1, 0},
        {0, 1, 1}
    }
};

// Color values for Tetris
const vector<vector<int>> COLORS = {
    {0, 255, 255},
    {255, 255, 0},
    {128, 0, 128},
    {255, 165, 0},
    {0, 0, 255},
    {0, 255, 0},
    {255, 0, 0}
};

class Tetrimino {
public:
    int x, y, shape;
    vector<vector<bool>> blocks;

    Tetrimino(int shape) : x(COLS / 2 - 2), y(0), shape(shape), blocks(TETRIMINOS[shape]) {}

    void rotate() {
        vector<vector<bool>> rotated(blocks[0].size(), vector<bool>(blocks.size()));
        for (size_t i = 0; i < blocks.size(); i++) {
            for (size_t j = 0; j < blocks[i].size(); j++) {
                rotated[j][blocks.size() - i - 1] = blocks[i][j];
            }
        }
        blocks = rotated;
    }

    void move(int dx, int dy) {
        x += dx;
        y += dy;
    }
};

class TetrisBoard {
private:
    int highScore;
    bool gameOverDisplayed;
    int count = 0;
public:
    vector<vector<int>> grid;

    TetrisBoard() : grid(ROWS, vector<int>(COLS, -1)) {}

    bool isCollision(const Tetrimino& tetrimino) {
        for (size_t i = 0; i < tetrimino.blocks.size(); i++) {
            for (size_t j = 0; j < tetrimino.blocks[i].size(); j++) {
                if (tetrimino.blocks[i][j]) {
                    int x = tetrimino.x + j;
                    int y = tetrimino.y + i;
                    if (x < 0 || x >= COLS || y < 0 || y
                        >= ROWS || grid[y][x] != -1) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        void merge(const Tetrimino& tetrimino) {
            for (size_t i = 0; i < tetrimino.blocks.size(); i++) {
                for (size_t j = 0; j < tetrimino.blocks[i].size(); j++) {
                    if (tetrimino.blocks[i][j]) {
                        int x = tetrimino.x + j;
                        int y = tetrimino.y + i;
                        grid[y][x] = tetrimino.shape;
                    }
                }
            }

            // Check for cleared lines
            for (int i = ROWS - 1; i >= 0;) {
                bool isLineFull = true;
                for (int j = 0; j < COLS; j++) {
                    if (grid[i][j] == -1) {
                        isLineFull = false;
                        break;
                    }
                }

                if (isLineFull) {
                    grid.erase(grid.begin() + i);
                    grid.insert(grid.begin(), vector<int>(COLS, -1));
                    count++;
                    //add like a "100 points!" msg maybe
                } else {
                    i--;
                }
            }
        }
    
    void gameOver(SDL_Plotter& g){
        ifstream fileIn;
        ofstream fileOut;
        string displayScore;
        string highScore;
        int score;

        if(!gameOverDisplayed){
            score = (count * 100);
            displayScore = "YOUR SCORE " + to_string(score);
            fileIn.open("highScore.txt");
            if(fileIn.is_open()){
                fileIn >> this->highScore;
            }
            if(score > this->highScore){
                this->highScore = score;
                fileOut.open("highScore.txt");
                fileOut << this->highScore;
            }
            highScore = "HIGHSCORE " + to_string(this->highScore);
            g.clear();
            // Here you can put a "Game Over" msg as well as the score text and stuff (Idk how to do the text/display stuff)
            gameOverDisplayed = true;
        }
    }
};
